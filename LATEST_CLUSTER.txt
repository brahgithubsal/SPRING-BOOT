---
- name: Playboook to configure the master node with kubernetes
  hosts: all
  become: true
  vars:
    - kube_version: v1.28
    - calico_version: v3.25.0
  tasks:
    - name: Update and Upgrade the apt packages before proceeding
      block:
        - name: performing the Update
          ansible.builtin.apt:
            update_cache: true

    - name: Block to manage Swap space
      block:
        - name: Check for swap to be on
          ansible.builtin.shell: "swapon -s | wc -l"
          register: number_of_swap
          changed_when: false

        - name: Turning off swaps
          ansible.builtin.shell: "swapoff -a"
          when: number_of_swap.stdout != 0

        - name: Check for swap in /etc/fstab
          ansible.builtin.shell: "sudo cat /etc/fstab | awk '{print $3}' | grep swap | wc -l"
          register: number_in_fstab
          changed_when: false

        - name: Changing entries in fstab
          ansible.builtin.lineinfile:
            path: /etc/fstab
            regexp: '.*swap.*'
            line: '# \g<0>'
          when: number_in_fstab.stdout != '0'
    
    - name: Change the hostname 
      ansible.builtin.hostname:
        name: master
    
    - name: Making neccesary changes in the etc hosts file
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "192.168.1.119 master"
        state: present

    - name: Configure the sysctl for kubernetes
      ansible.builtin.shell: "{{ item }}"
      loop:
        - "echo 'net.bridge.bridge-nf-call-ip6tables = 1' | tee /etc/sysctl.d/k8s.conf"
        - "echo 'net.bridge.bridge-nf-call-iptables = 1' | tee -a /etc/sysctl.d/k8s.conf"
        - "sysctl --system"
      ignore_errors: yes
    
    - name: Check if br_netfilter is set
      ansible.builtin.shell: "lsmod | grep br_net | wc -l"
      register: lsmod_results

    - name: Load br_netfilter module
      ansible.builtin.shell: "{{ item }}"
      loop:
        - "echo 'br_netfilter' | tee /etc/modules-load.d/k8s.conf"
        - "modprobe br_netfilter"
      ignore_errors: yes
      when: lsmod_results.stdout != '2'

    - name: Checking for ip_forward configurations
      ansible.builtin.shell: "cat /proc/sys/net/ipv4/ip_forward"
      register: ip_forward_result
      changed_when: false

    - name: Forward IP persistently if required
      block:
        - name: Forwarding the IP in sysctl
          ansible.builtin.lineinfile:
            path: /etc/sysctl.conf
            line: "net.ipv4.ip_forward=1"
            state: present
          register: forwarded 
        
        - name: Change the ip_forward for runtime
          ansible.builtin.shell: "sysctl -w net.ipv4.ip_forward=1"
          
        - name: Reloading the sysctl config
          ansible.builtin.shell: "sysctl -p /etc/sysctl.conf"
          when: forwarded is changed 
      when: ip_forward_result.stdout != '1'
    
    - name: Check and Remove docker if previous versions exist 
      block:
        - name: Remove the docker and containerd package
          ansible.builtin.apt:
            name:
              - docker.io
            state: absent

    - name: Add the apt repository of containerd and Install containerd runtime
      block:
        - name: Check if keyring is already present
          ansible.builtin.stat:
            path: /usr/share/keyrings/docker.gpg
          register: containerd_keyring_present

        - name: Adding the Containerd repo key
          ansible.builtin.apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            keyring: /usr/share/keyrings/docker.gpg 
          when: containerd_keyring_present.stat.exists != 'true'

        - name: Retreive dpkg architecture 
          ansible.builtin.shell: "echo $(dpkg --print-architecture)"
          register: dpkg_architecture
          changed_when: false
          ignore_errors: true

        - name: The containerd repo
          ansible.builtin.shell: "echo 'deb [arch={{ dpkg_architecture.stdout }} signed-by=/usr/share/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable' | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null"
          changed_when: false
          ignore_errors: true

        - name: Installing containerd runtime
          ansible.builtin.apt:
            name: containerd
            state: present
        
        - name: Make the directory
          ansible.builtin.file:
            path: /etc/containerd
            state: directory

        - name: Generate CNI configurations
          ansible.builtin.shell: "containerd config default > /etc/containerd/config.toml"
        
        - name: Change the systemd driver of containerd
          ansible.builtin.replace:
            path: /etc/containerd/config.toml
            regexp: 'SystemdCgroup = false'
            replace: 'SystemdCgroup = true'
            
    - name: Changing the user permissions to access container socket
      block:
        - name: Setting up a group
          ansible.builtin.group:
            name: containerd
            state: present
        
        - name: Retrive the group id
          ansible.builtin.shell: "cat /etc/group | grep containerd | awk -F ':' '{print $3}'"
          register: containerd_group_id

        - name: Adding the user to the group
          ansible.builtin.user: 
            name: devuser
            groups: containerd
            append: yes
        
        - name: Add the group id in the config file 
          ansible.builtin.replace:
            path: /etc/containerd/config.toml
            after: '[grpc]\n*address = "/run/containerd/containerd.sock"'
            regexp: gid = 0
            replace: 'gid = {{ containerd_group_id.stdout }}'

        - name: Changing permission of the socket to the group
          ansible.builtin.file: 
            path: "/run/containerd/containerd.sock"
            group: containerd

    - name: Reloading the containerd service
      ansible.builtin.service:
        name: containerd
        state: restarted
        enabled: true

    - name: Install dependent packages
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - conntrack
        state: present

    - name: Make the Keyring directory
      ansible.builtin.file:
        path: /usr/share/keyrings
        state: directory
        mode: 755

    - name: Add the Apt repository /usr/share/keyrings/kubernetes-archive-keyring.gpg
      block:
        - name: Check if the keyring file is already present
          ansible.builtin.stat:
            path: /usr/share/keyrings/kubernetes-archive-keyring.gpg
          register: gpg_key_present

        - name: Add apt key
          ansible.builtin.apt_key:
            url: https://pkgs.k8s.io/core:/stable:/{{ kube_version }}/deb/Release.key
            keyring: /usr/share/keyrings/kubernetes-archive-keyring.gpg
          when: gpg_key_present.stat.exists != 'true'

    - name: Add the Kubernetes Repository
      ansible.builtin.apt_repository:
        repo: deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ kube_version }}/deb/ /
        state: present
        filename: kubernetes
    
    - name: Perform an apt update
      ansible.builtin.apt:
        update_cache: yes

    - name: Install the main kubeadm, kubelet, kubectl
      ansible.builtin.apt:
        name: 
          - 'kubelet'
          - 'kubeadm'
          - 'kubectl'
        state: present
      ignore_errors: true

    - name: Making sure containerd service is started
      ansible.builtin.service:
        name: containerd
        state: started

- hosts: master
  become: yes
  tasks:
    - name: Initialize Kubernetes cluster
      shell: kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address 192.168.1.119
    - name: Create .kube directory
      become: yes
      become_user: vagrant
      file:
        path: $HOME/.kube
        state: directory
        mode: 0755

    - name: Copy admin.conf to User's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/vagrant/.kube/config
        remote_src: yes
        owner: vagrant


- hosts: master
  become: no
  tasks:
    - name: Install Calico network plugin
      command: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml
      
- name: Configure Join Commands on Master Node
  hosts: master
  become: yes
  tasks:
    - name: Retrieve Join Command
      shell: kubeadm token create --print-join-command
      register: join_command_raw

    - name: Set Join Command
      set_fact:
        join_command: "{{ join_command_raw.stdout_lines[0] }}"

- name: Join Worker Nodes
  hosts: worker
  become: yes
  tasks:
    - name: Set hostname to 'worker'
      shell: hostnamectl set-hostname worker
      become: yes

    - name: Delete /etc/kubernetes/pki/ca.crt
      shell: rm -rf /etc/kubernetes/pki/ca.crt
      become: yes

    - name: Join worker to cluster
      shell: "{{ hostvars['master'].join_command }}"
      args:
        chdir: /home/vagrant


[master]
master ansible_host=192.168.1.157 ansible_user=vagrant ansible_ssh_private_key_file=/home/aziz/master_key

[worker]
worker ansible_host=192.168.1.100 ansible_user=vagrant ansible_ssh_private_key_file=/home/aziz/worker_key

